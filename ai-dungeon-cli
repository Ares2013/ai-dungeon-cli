#!/usr/bin/env python3

import os
import requests
import textwrap
import shutil
import yaml
from pprint import pprint



# CONFIG

cfg_file_path = os.path.dirname(os.path.realpath(__file__)) + '/config.yml'

try:
    with open(cfg_file_path, 'r') as cfg_raw:
        cfg = yaml.load(cfg_raw, Loader=yaml.FullLoader)
except IOError:
    print("Missing config file at " + cfg_file_path)
    exit(1)

if not ('auth_token' in cfg and cfg['auth_token']) :
    print("Missing or empty 'auth_token' in config file")
    exit(1)

auth_token = cfg['auth_token']

prompt = '> '
if 'prompt' in cfg and cfg['prompt']:
    prompt = cfg['prompt']



# STATE

user_id = None
session_id = None
public_id = None
prompt_i = 0

do_continue = True

locale = None
term = None
if 'LC_ALL' in os.environ:
    locale = os.environ['LC_ALL']
if 'TERM' in os.environ:
    term = os.environ['TERM']

term_size = shutil.get_terminal_size((80, 20))
term_width = term_size.columns



# FUNCTIONS

def clear_console():
    if os.name == 'nt':
        _ = os.system('cls')
    else:
        _ = os.system('clear')

def diplay_spash(term_width):
    locale = None
    if 'LC_ALL' in os.environ:
        locale = os.environ['LC_ALL']
    if 'TERM' in os.environ:
        term = os.environ['TERM']

    filename = None
    if locale == 'C' or term.startswith('vt'):
        if term_width >= 80:
            filename = 'opening-ascii.txt'
    else:
        if term_width >= 80:
            filename = 'opening-utf8.txt'

    if filename:
        with open(filename, 'r') as f:
            print(f.read())

def print_sentences(text, term_width):
    print("\n".join(textwrap.wrap(text, term_width)))

def choose_selection(allowed_values, prompt, term_width):
    while True:
        choice = input(prompt)
        print()

        choice = choice.strip()
        if choice == '/quit':
            return choice
        elif choice in allowed_values.keys():
            choice = allowed_values[choice]
        elif choice in allowed_values.values():
            pass
        else:
            print_sentences("Please enter a valid selection.", term_width)
            print()
            continue
        break
    return choice


def make_custom_config(s, prompt, term_width):

    print_sentences("Enter a prompt that describes who you are and the first couple sentences of where you start out ex:  'You are a knight in the kingdom of Larion. You are hunting the evil dragon who has been terrorizing the kingdom. You enter the forest searching for the dragon and see'", term_width)
    print()

    context = input(prompt)
    print()

    if context == '/quit':
        return context

    return {
        "storyMode": 'custom',
        "characterType": None,
        "name": None,
        "customPrompt": context,
        "promptId": None,
    }

def choose_config(s, prompt, term_width):
    r = s.get("https://api.aidungeon.io/sessions/*/config")
    resp = r.json()

    print('Pick a setting...')
    print()

    i = 1
    mode_select_dict = {}
    for mode, opts in resp['modes'].items():
        print(str(i) + ') ' + mode)
        mode_select_dict[str(i)] = mode
        i += 1
    print()
    selected_mode = choose_selection(mode_select_dict, prompt, term_width)
    if selected_mode == '/quit':
        return selected_mode
    if selected_mode == 'custom':
        return make_custom_config(s, prompt, term_width)

    print('Select a character...')
    print()

    i = 1
    character_select_dict = {}
    for character, opts in resp['modes'][selected_mode]['characters'].items():
        print(str(i) + ') ' + character)
        character_select_dict[str(i)] = character
        i += 1
    print()
    selected_character = choose_selection(character_select_dict, prompt, term_width)
    if selected_character == '/quit':
        return selected_character

    print("Enter your character's name...")
    print()

    character_name = input(prompt)
    print()
    if character_name == '/quit':
        return character_name

    return {
        "storyMode": selected_mode,
        "characterType": selected_character,
        "name": character_name,
        "customPrompt": None,
        "promptId": None,
    }


def init_story(s, story_conf, term_width):

    print("Generating story... Please wait...")
    print()

    r = s.post('https://api.aidungeon.io/sessions',
               json=story_conf)
    story_res = r.json()
    story_pitch = story_res['story'][0]['value']
    print_sentences(story_pitch, term_width)
    print()
    return story_res

def process_regular_action(session_id, user_input, prompt_i, term_width):
    r = s.post("https://api.aidungeon.io/sessions/" + str(session_id) + "/inputs",
               json={ 'text': user_input })
    action_res = r.json()
    action_res_str = action_res[prompt_i]['value']
    print_sentences(action_res_str, term_width)
    print()
    return ['regular', action_res]

def process_remember(session_id, user_input, prompt_i, term_width):
    r = s.patch("https://api.aidungeon.io/sessions/" + str(session_id),
               json={ 'context': user_input })
    action_res = r.json()
    pprint(action_res)
    return ['/remember', action_res]

def process_next_action(session_id, prompt, prompt_i, term_width):
    user_input = input(prompt)
    print()

    if user_input == '/quit':
        return ['/quit', None]

    if user_input.startswith('/remember'):
        return process_remember(session_id, user_input[len('/remember '):], prompt_i, term_width)

    return process_regular_action(session_id, user_input, prompt_i, term_width)



# MAIN

clear_console()

diplay_spash(term_width)

s = requests.Session()

s.headers.update({
        # 'cookie': cookie,
        'X-Access-Token': auth_token,
    })

# initial query
# r = s.get("https://play.aidungeon.io/")

story_conf = choose_config(s, prompt, term_width)
if story_conf == '/quit':
    exit()

story_res = init_story(s, story_conf, term_width)
user_id = story_res['userId']
session_id = story_res['id']
public_id = story_res['publicId']
prompt_i += 2

while(do_continue):
    res = process_next_action(session_id, prompt, prompt_i, term_width)
    action_type, action_res = res
    if action_type == 'regular':
        prompt_i += 2
    if action_type == '/quit':
        do_continue = False
